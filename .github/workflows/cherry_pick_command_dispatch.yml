# This is a basic workflow to help you get started with Actions

name: cherry-pick-command

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  repository_dispatch:
    types: [cherry-pick-command]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prContext:
    runs-on: ubuntu-latest
    outputs:
      prTitle: ${{ steps.prContext.outputs.prTitle }}
      prBody: ${{ steps.prContext.outputs.prBody }}
      prMergeCommit: ${{ steps.prContext.outputs.prMergeCommit }}
      prBaseRef: ${{ steps.prContext.outputs.prBaseRef }}
    steps:
      - id: prContext
        run: |
          
          readonly PR_URL="https://api.github.com/repos/${{ github.event.client_payload.slash_command.args.named.org }}/${{ github.event.client_payload.slash_command.args.named.repo }}/pulls/${{ github.event.client_payload.slash_command.args.named.pr }}"
          readonly PR=$(curl -s ${PR_URL})
          readonly BODY=$(echo ${PR} | jq .body)
          readonly TITLE=$(echo ${PR} | jq .title)
          readonly MERGE_COMMIT=$(echo ${PR} | jq .merge_commit_sha)
          readonly BASE_REF=$(echo ${PR} | jq .base.ref)
          
          echo "title: ${TITLE}"
          echo "body: ${BODY}"
          echo "merge commit sha: ${MERGE_COMMIT}"
          echo "base ref: ${BASE_REF}"
          
          echo "::set-output name=prTitle::${TITLE}"
          echo "::set-output name=prBody::${BODY}"
          echo "::set-output name=prMergeCommit::${MERGE_COMMIT}"
          echo "::set-output name=prBaseRef::${BASE_REF}"
          
  pr:
    runs-on: ubuntu-latest
    needs: [prContext]
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'pierDipi/${{ github.event.client_payload.slash_command.args.named.fork }}'
          ref: ${{ github.event.client_payload.slash_command.args.named.branch }}

      - id: cherry-pick
        name: Cherry-pick  
        run: |
          git remote add upstream https://github.com/${{ github.event.client_payload.slash_command.args.named.org }}/${{ github.event.client_payload.slash_command.args.named.repo }}
          git fetch origin
          git fetch upstream
          git checkout ${{ github.event.client_payload.slash_command.args.named.branch }}
          git checkout ${{ github.event.client_payload.slash_command.args.named.branch }}-${{ github.event.client_payload.slash_command.args.named.pr }}
          git cherry-pick ${{ needs.prContext.outputs.prBaseRef }} ${{ needs.prContext.outputs.prMergeCommit }} 
          
      - name: Create PR
        id: prCreate
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          commit-message: ${{ needs.prContext.outputs.prTitle }}
          committer: Pierangelo Di Pilato <pierangelodipilato@gmail.com>
          author: Pierangelo Di Pilato <pierangelodipilato@gmail.com>
          signoff: true
          base: '${{ github.event.client_payload.slash_command.args.named.branch }}'
          branch: '${{ github.event.client_payload.slash_command.args.named.branch }}-${{ github.event.client_payload.slash_command.args.named.pr }}'
          push-to-fork: true
          delete-branch: true
          title: '[${{ github.event.client_payload.slash_command.args.named.branch }}] ${{ needs.prContext.outputs.prTitle }}'
          body: '${{ needs.prContext.outputs.prBody }}'
#         run: |
#           echo "command: ${{ github.event.client_payload.slash_command.command }}"
#           echo "all: ${{ github.event.client_payload.slash_command.args.all }}"
#           echo "branch: ${{ github.event.client_payload.slash_command.args.named.branch }}"
#           echo "pr: ${{ github.event.client_payload.slash_command.args.named.pr }}"
#           echo "fork: ${{ github.event.client_payload.slash_command.args.named.fork }}"
#           echo "org: ${{ github.event.client_payload.slash_command.args.named.org }}"
#           echo "repo: ${{ github.event.client_payload.slash_command.args.named.repo }}"
          
#           echo "prTitle: ${{ needs.prContext.outputs.prTitle }}"
#           echo "prBody: ${{ needs.prContext.outputs.prBody }}"
#           echo "prMergeCommit: ${{ needs.prContext.outputs.prMergeCommit }}"
